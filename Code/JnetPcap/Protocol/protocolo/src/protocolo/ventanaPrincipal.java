/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package protocolo;

import java.io.*;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.nio.ByteBuffer;  
import java.util.ArrayList;  
import java.util.Arrays;  
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;  
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import org.jnetpcap.Pcap;  
import org.jnetpcap.PcapAddr;
import org.jnetpcap.PcapBpfProgram;
import org.jnetpcap.PcapIf;  
import org.jnetpcap.PcapSockAddr;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;

/**
 *
 * @author alan-
 */
public class ventanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form ventanaPrincipal
     */
    public ventanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        interfacesLista = new javax.swing.JComboBox<>();
        seleccionarBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        macOrigenTxt = new javax.swing.JTextField();
        macDestinoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        archivoTxt = new javax.swing.JTextField();
        seleccionarArchivo = new javax.swing.JButton();
        enviarBtn = new javax.swing.JButton();
        enviadosTxt = new javax.swing.JLabel();
        recibidosTxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        carpetaDestinoTxt = new javax.swing.JTextField();
        seleccionarCarpeta = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Send FIles");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel1.setText("Network Interface:");

        seleccionarBtn.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        seleccionarBtn.setForeground(new java.awt.Color(46, 29, 29));
        seleccionarBtn.setText("Start to Listen");
        seleccionarBtn.setName(""); // NOI18N
        seleccionarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seleccionarBtnMouseClicked(evt);
            }
        });
        seleccionarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel2.setText("Host MAC:");

        macOrigenTxt.setEditable(false);
        macOrigenTxt.setEnabled(false);

        macDestinoTxt.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel3.setText("Destination MAC:");

        jLabel4.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel4.setText("File to Send:");

        archivoTxt.setEditable(false);
        archivoTxt.setEnabled(false);

        seleccionarArchivo.setText("..");
        seleccionarArchivo.setEnabled(false);
        seleccionarArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seleccionarArchivoMouseClicked(evt);
            }
        });

        enviarBtn.setFont(new java.awt.Font("Roboto Condensed", 0, 18)); // NOI18N
        enviarBtn.setText("Send");
        enviarBtn.setEnabled(false);
        enviarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarBtnMouseClicked(evt);
            }
        });
        enviarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarBtnActionPerformed(evt);
            }
        });

        enviadosTxt.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        enviadosTxt.setText("Bytes Send:");
        enviadosTxt.setEnabled(false);

        recibidosTxt.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        recibidosTxt.setText("Bytes Recived:");
        recibidosTxt.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel5.setText("Recive File in:");

        carpetaDestinoTxt.setEditable(false);

        seleccionarCarpeta.setText("..");
        seleccionarCarpeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seleccionarCarpetaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enviadosTxt)
                            .addComponent(recibidosTxt))
                        .addContainerGap(667, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(carpetaDestinoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(seleccionarCarpeta))
                                    .addComponent(macDestinoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(macOrigenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(archivoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(seleccionarArchivo))
                                    .addComponent(seleccionarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(enviarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(207, 207, 207))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(interfacesLista, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(interfacesLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seleccionarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(macOrigenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(macDestinoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(archivoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seleccionarArchivo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(carpetaDestinoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seleccionarCarpeta)))
                    .addComponent(enviarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addComponent(enviadosTxt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recibidosTxt)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    List<PcapIf> interfaces = new ArrayList<>();
    PcapIf interfaz;
    Pcap pcapActual;
    byte[] macActual = new byte[6];
    byte[] macOrigen = new byte[6];
    byte[] macDestino = new byte[6];
    StringBuilder errbuf = new StringBuilder();
    Thread hiloPrincipal;
    RandomAccessFile bfOrigen;
    RandomAccessFile bfDestino;
    String nombreArchivoOrigen = "";
    String nombreArchivoDestino = "";
    int sizeOrigen = 0;
    int sizeDestino = 0;
    int partesOrigen = 0;
    int partesDestino = 0;
    int sizePartes = 700;
    int partesEnviadas = 0;
    int partesRecibidas = 0;
    boolean esperando = false;
    boolean enviando = false;
    boolean recibiendo = false;
    int tramasSimultaneas = 10;
    volatile int tramasEnviadas = 0;
    
    private static String macToString(final byte[] mac) {
        final StringBuilder buf = new StringBuilder();
        for (byte b : mac) {
          if (buf.length() != 0) {
            buf.append(':');
          }
          if (b >= 0 && b < 16) {
            buf.append('0');
          }
          buf.append(Integer.toHexString((b < 0) ? b + 256 : b).toUpperCase());
        }
        return buf.toString();
    }
    
    public static byte[] stringToMac(String s) {
    s = s.replace(":", "");
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i < len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}
    
    private static String ipToString(byte[] ip){
  	StringBuilder buf = new StringBuilder();
  	for(byte b : ip){
            if(buf.length() != 0){
                buf.append(".");
            }
            buf.append(Integer.toString((b < 0) ? b + 256 : b));
  	}
  	return buf.toString();
    }
    
    private static void fillEthType(byte[] trama){
        trama[12] = 0x16;
        trama[13] = 0x01;
    }
    
    private static void fillMacs(byte[] trama, byte[] macO, byte[] macD){
        System.arraycopy(macD, 0, trama, 0, 6);
        System.arraycopy(macO, 0, trama, 6, 6);
    }
    
    private static void getMacs(byte[] trama, byte[] macO, byte[] macD){
        System.arraycopy(trama, 6, macO, 0, 6);
        System.arraycopy(trama, 0, macD, 0, 6);
    }
    
    private static void fillFilename(byte[] trama, String nombre){
        for(int i = 0; i < nombre.length(); i++){
            trama[15 + i] = (byte)nombre.charAt(i);
        }
    }
    
    private static String getFilename(byte[] trama){
        String nombre = "";
        for(int i = 15; i <= 270; i++){
            if(trama[i] == 0) break;
            nombre += (char)trama[i];
        }
        return nombre;
    }
    
    private static void fillSize(byte[] trama, int size){
        for(int i = 0; i < 4; i++){
            trama[274 - i] = (byte)((size >> (i * 8)) & 0xFF);
        }
    }
    private static int getSize(byte[] trama){
        int size = 0;
        for(int i = 0; i < 4; i++){
            size |= ((int)(trama[271 + i] & 0xFF)) << (8 * (3 - i));
        }
        return size;
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setLocationRelativeTo(null);
        
        //Obtener las interfaces disponibles
        Pcap.findAllDevs(interfaces, errbuf);
        try{
            for(PcapIf inter : interfaces){
                String descripcion = inter.getDescription();
                if(descripcion == null) descripcion = "";
                
                
                final byte[] MAcAddress = inter.getHardwareAddress();

                String mac = (MAcAddress != null)? 
                macToString(MAcAddress) : "No MAC Address";
                
                String ip = "";
                Iterator<PcapAddr> it = inter.getAddresses().iterator();
                if(it.hasNext()){
                    ip = ipToString(it.next().getAddr().getData());
                }
                interfacesLista.addItem(inter.getName() + " [" + descripcion + "] [" + mac + "] [" + ip + "]");
            }
        }catch(IOException io){
            //
        }
    }//GEN-LAST:event_formWindowOpened
    
    private void analizarTrama(PcapPacket packet){
        int len = packet.size();
        byte[] trama = packet.getByteArray(0, len);
        if(packet.getUByte(12) == 22 && packet.getUByte(13) == 1){ //0x1601
                    /*System.out.printf("Paquete recibido el %s bytes capturados=%-4d tam original=%-4d\n",
				    new Date(packet.getCaptureHeader().timestampInMillis()),
				    packet.getCaptureHeader().caplen(),  // Length actually captured
				    packet.getCaptureHeader().wirelen()
				    );*/
            byte[] macO = new byte[6];
            byte[] macD = new byte[6];
            getMacs(trama, macO, macD);
            byte accion = trama[14];
            if(!Arrays.equals(macD, macActual)) return;
            switch(accion){
                case 0x00:{ //ask
                    System.arraycopy(macO, 0, macOrigen, 0, 6);
                    nombreArchivoDestino = getFilename(trama);
                    sizeDestino = getSize(trama);
                    int opcion = JOptionPane.showConfirmDialog(null, "El usuario con MAC " + macToString(macO) + " te quiere enviar el archivo:\n" + 
                            nombreArchivoDestino + "\nLongitud: " + sizeDestino + " bytes\n¿Recibir?", "Transferencia entrante", JOptionPane.YES_NO_OPTION);
                    byte[] nuevaTrama = new byte[1024];
                    fillMacs(nuevaTrama, macD, macO);
                    fillEthType(nuevaTrama);
                    fillFilename(nuevaTrama, nombreArchivoDestino);
                    if(opcion == JOptionPane.YES_OPTION){
                        nuevaTrama[14] = 0x01;
                        recibiendo = true;
                    }else{
                        nuevaTrama[14] = 0x02;
                        nombreArchivoDestino = "";
                        sizeDestino = 0;
                        macOrigen = new byte[6];
                    }
                    enviarTrama(nuevaTrama);
                    break;
                }
                case 0x01:{ //yes
                    if(esperando && nombreArchivoOrigen.equals(getFilename(trama))){
                        esperando = false;
                        enviando = true;
                        enviarBtn.setText("Cancelar");
                        enviadosTxt.setEnabled(true);
                        partesOrigen = (sizeOrigen % sizePartes == 0 ? sizeOrigen / sizePartes : sizeOrigen / sizePartes + 1);
                        byte [] nuevaTrama = new byte[1024];
                        fillMacs(nuevaTrama, macD, macO);
                        fillFilename(nuevaTrama, nombreArchivoOrigen);
                        fillEthType(nuevaTrama);
                        nuevaTrama[14] = 0x03;
                        fillSize(nuevaTrama, partesOrigen);
                        enviarTrama(nuevaTrama);
                    }
                    break;
                }
                case 0x02:{ //no
                    if(esperando && nombreArchivoOrigen.equals(getFilename(trama))){
                        esperando = false;
                        nombreArchivoOrigen = "";
                        sizeOrigen = 0;
                        try{
                            bfOrigen.close();
                        }catch(IOException e){
                            //
                        }
                        seleccionarBtn.setEnabled(true);
                        macOrigenTxt.setEnabled(true);
                        macDestinoTxt.setEnabled(true);
                        archivoTxt.setEnabled(true);
                        seleccionarArchivo.setEnabled(true);
                        enviarBtn.setText("Enviar");
                        JOptionPane.showMessageDialog(null, "El receptor ha rechazado tu transferencia.", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
                        archivoTxt.setText("");
                    }
                    break;
                }
                case 0x03:{ //partSize
                    if(recibiendo && nombreArchivoDestino.equals(getFilename(trama))){
                        partesDestino = getSize(trama);
                        seleccionarBtn.setEnabled(false);
                        macOrigenTxt.setEnabled(false);
                        macDestinoTxt.setEnabled(false);
                        archivoTxt.setEnabled(false);
                        seleccionarArchivo.setEnabled(false);
                        enviarBtn.setText("Cancelar");
                    }
                    try{
                        bfDestino = new RandomAccessFile(carpetaDestinoTxt.getText() + "\\" + nombreArchivoDestino, "rw");
                        recibidosTxt.setEnabled(true);
                        Thread hilo = new Thread(new Runnable(){
                            @Override
                            public void run(){
                                for(int i = 0; i < partesDestino; i++){
                                    byte [] nuevaTrama = new byte[1024];
                                    fillMacs(nuevaTrama, macD, macO);
                                    fillEthType(nuevaTrama);
                                    fillFilename(nuevaTrama, nombreArchivoDestino);
                                    nuevaTrama[14] = 0x04;
                                    fillSize(nuevaTrama, i);
                                    enviarTrama(nuevaTrama);
                                    tramasEnviadas++;
                                    if((i + 1) % tramasSimultaneas == 0){
                                        while(tramasEnviadas > 0){}
                                    }
                                }
                            }
                        });
                        hilo.start();
                    }catch(IOException e){
                        //
                    }
                    break;
                }
                case 0x04:{ //sendContent
                    if(enviando && nombreArchivoOrigen.equals(getFilename(trama))){
                        int parteActual = getSize(trama);
                        if(parteActual >= partesOrigen) break;
                        byte [] nuevaTrama = new byte[1024];
                        fillMacs(nuevaTrama, macD, macO);
                        fillEthType(nuevaTrama);
                        fillFilename(nuevaTrama, nombreArchivoOrigen);
                        nuevaTrama[14] = 0x05;
                        fillSize(nuevaTrama, parteActual);
                        try{
                            //System.out.print("Parte " + parteActual + " ");
                            bfOrigen.seek(parteActual * sizePartes);
                            if(parteActual + 1 == partesOrigen){
                                bfOrigen.readFully(nuevaTrama, 275, ((sizeOrigen - 1) % sizePartes) + 1);
                                //System.out.println("Enviado: " + (parteActual * sizePartes) + " - " + (sizeOrigen - 1));
                            }else{
                                bfOrigen.readFully(nuevaTrama, 275, sizePartes);
                                //System.out.println("Enviado: " + (parteActual * sizePartes) + " - " + (sizePartes * (parteActual + 1) - 1));
                            }
                            partesEnviadas++;
                            enviadosTxt.setText("Bytes enviados: " + (partesEnviadas * sizePartes) + " / " + sizeOrigen + " (" + ((double)partesEnviadas / (double)partesOrigen * 100) + "%)");
                        }catch(IOException e){
                            //
                        }
                        enviarTrama(nuevaTrama);
                    }
                    break;
                }
                case 0x05:{ //processContent
                    if(recibiendo && nombreArchivoDestino.equals(getFilename(trama))){
                        tramasEnviadas--;
                        int parteActual = getSize(trama);
                        try{
                            //System.out.print("Parte " + parteActual + " ");
                            bfDestino.seek(parteActual * sizePartes);
                            if(parteActual + 1 == partesDestino){
                                bfDestino.write(trama, 275, ((sizeDestino - 1) % sizePartes) + 1);
                                //System.out.println("Recibido: " + (parteActual * sizePartes) + " - " + (sizeDestino - 1));
                            }else{
                                bfDestino.write(trama, 275, sizePartes);
                                //System.out.println("Recibido: " + (parteActual * sizePartes) + " - " + (sizePartes * (parteActual + 1) - 1));
                            }
                        }catch(IOException e){
                            //
                        }
                        partesRecibidas++;
                        recibidosTxt.setText("Bytes recibidos: " + (partesRecibidas * sizePartes) + " / " + sizeDestino + " (" + ((double)partesRecibidas / (double)partesDestino * 100) + "%)");
                        if(partesRecibidas == partesDestino){
                            try{
                                bfDestino.close();
                            }catch(IOException e){
                                //
                            }
                            recibidosTxt.setText("Bytes recibidos: ");
                            recibidosTxt.setEnabled(false);
                            recibiendo = false;
                            sizeDestino = 0;
                            partesDestino = 0;
                            partesRecibidas = 0;
                            tramasEnviadas = 0;
                            macOrigen = new byte[6];
                            byte [] nuevaTrama = new byte[1024];
                            fillMacs(nuevaTrama, macD, macO);
                            fillEthType(nuevaTrama);
                            fillFilename(nuevaTrama, nombreArchivoDestino);
                            nuevaTrama[14] = 0x08;
                            enviarTrama(nuevaTrama);
                            nombreArchivoDestino = "";
                            seleccionarBtn.setEnabled(true);
                            macOrigenTxt.setEnabled(true);
                            macDestinoTxt.setEnabled(true);
                            archivoTxt.setEnabled(true);
                            seleccionarArchivo.setEnabled(true);
                            enviarBtn.setText("Enviar");
                            JOptionPane.showMessageDialog(null, "Has recibido tu archivo.", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    break;
                }
                case 0x06:{ //senderCancel
                    if(recibiendo && nombreArchivoDestino.equals(getFilename(trama))){
                        try{
                            bfDestino.close();
                        }catch(IOException e){
                            //
                        }
                        recibidosTxt.setText("Bytes recibidos: ");
                        recibidosTxt.setEnabled(false);
                        recibiendo = false;
                        sizeDestino = 0;
                        partesDestino = 0;
                        partesRecibidas = 0;
                        tramasEnviadas = 0;
                        macOrigen = new byte[6];
                        nombreArchivoDestino = "";
                        seleccionarBtn.setEnabled(true);
                        macOrigenTxt.setEnabled(true);
                        macDestinoTxt.setEnabled(true);
                        archivoTxt.setEnabled(true);
                        seleccionarArchivo.setEnabled(true);
                        enviarBtn.setText("Enviar");
                        JOptionPane.showMessageDialog(null, "El emisor ha cancelado la transferencia.", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;
                }
                case 0x07:{ //receiverCancel
                    if(enviando && nombreArchivoOrigen.equals(getFilename(trama))){
                        enviando = false;
                        enviadosTxt.setText("Bytes enviados: ");
                        enviadosTxt.setEnabled(false);
                        sizeOrigen = 0;
                        partesOrigen = 0;
                        partesEnviadas = 0;
                        nombreArchivoOrigen = "";
                        try{
                            bfOrigen.close();
                        }catch(IOException e){
                            //
                        }
                        seleccionarBtn.setEnabled(true);
                        macOrigenTxt.setEnabled(true);
                        macDestinoTxt.setEnabled(true);
                        archivoTxt.setEnabled(true);
                        seleccionarArchivo.setEnabled(true);
                        enviarBtn.setText("Enviar");
                        JOptionPane.showMessageDialog(null, "El receptor ha cancelado la tranferencia.", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
                        archivoTxt.setText("");
                    }
                    break;
                }
                case 0x08:{ //end
                    if(enviando && nombreArchivoOrigen.equals(getFilename(trama))){
                        enviando = false;
                        enviadosTxt.setText("Bytes enviados: ");
                        enviadosTxt.setEnabled(false);
                        sizeOrigen = 0;
                        partesOrigen = 0;
                        partesEnviadas = 0;
                        nombreArchivoOrigen = "";
                        try{
                            bfOrigen.close();
                        }catch(IOException e){
                            //
                        }
                        seleccionarBtn.setEnabled(true);
                        macOrigenTxt.setEnabled(true);
                        macDestinoTxt.setEnabled(true);
                        archivoTxt.setEnabled(true);
                        seleccionarArchivo.setEnabled(true);
                        enviarBtn.setText("Enviar");
                        JOptionPane.showMessageDialog(null, "Ha finalizado tu transferencia.", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
                        archivoTxt.setText("");
                    }
                    break;
                }
            }
        }
    }
    
    private void enviarTrama(byte [] packet){
        Thread hilo = new Thread(new Runnable(){
            @Override
            public void run(){
                pcapActual.sendPacket(packet);
            }
        });
        hilo.start();
    }
    
    private void seleccionarBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seleccionarBtnMouseClicked
        interfaz = interfaces.get(interfacesLista.getSelectedIndex());
        if(pcapActual != null){
            pcapActual.close();
            pcapActual = null;
            seleccionarBtn.setText("Comenzar a escuchar en la interfaz seleccionada");
            interfacesLista.setEnabled(true);
            macOrigenTxt.setText("");
            macOrigenTxt.setEnabled(false);
            macDestinoTxt.setEnabled(false);
            archivoTxt.setEnabled(false);
            seleccionarArchivo.setEnabled(false);
            enviarBtn.setEnabled(false);
        }else{
            try{
                macActual = interfaz.getHardwareAddress();
                pcapActual = Pcap.openLive(interfaz.getName(), 64 * 1024, Pcap.MODE_PROMISCUOUS, 1, errbuf);
                PcapBpfProgram filtro = new PcapBpfProgram();
                pcapActual.compile(filtro, "ether proto 0x1601", 0, 0);
                pcapActual.setFilter(filtro);
                PcapPacketHandler<String> jPacketHandler = new PcapPacketHandler<String>(){
                    @Override
                    public void nextPacket(PcapPacket paquete, String txt){
                        analizarTrama(paquete);
                    }
                };
                hiloPrincipal = new Thread(new Runnable(){
                    @Override
                    public void run(){
                        pcapActual.loop(Pcap.LOOP_INFINITE, jPacketHandler, "");
                    }
                });
                hiloPrincipal.start();
                seleccionarBtn.setText("Dejar de escuchar en la interfaz seleccionada");
                interfacesLista.setEnabled(false);
                macOrigenTxt.setText(macToString(macActual));
                macOrigenTxt.setEnabled(true);
                macDestinoTxt.setEnabled(true);
                archivoTxt.setEnabled(true);
                seleccionarArchivo.setEnabled(true);
                enviarBtn.setEnabled(true);
            }catch(IOException io){
                //
            }
        }
    }//GEN-LAST:event_seleccionarBtnMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(pcapActual != null){
            pcapActual.close();
        }
    }//GEN-LAST:event_formWindowClosing

    private void seleccionarArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seleccionarArchivoMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File archivoOrigen = fileChooser.getSelectedFile();
            nombreArchivoOrigen = archivoOrigen.getName();
            try{
                bfOrigen = new RandomAccessFile(archivoOrigen, "r");
            }catch(IOException e){
                //
            }
            sizeOrigen = (int)archivoOrigen.length();
            archivoTxt.setText(archivoOrigen.getAbsolutePath());
        }
    }//GEN-LAST:event_seleccionarArchivoMouseClicked

    private void enviarBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviarBtnMouseClicked
        if(esperando){
            esperando = false;
            seleccionarBtn.setEnabled(true);
            macOrigenTxt.setEnabled(true);
            macDestinoTxt.setEnabled(true);
            archivoTxt.setEnabled(true);
            seleccionarArchivo.setEnabled(true);
            enviarBtn.setText("Enviar");
        }else{
            if(enviando){
                enviando = false;
                byte[] trama = new byte[1024];
                fillEthType(trama);
                fillMacs(trama, macActual, macDestino);
                trama[14] = 0x06; //senderCancel
                fillFilename(trama, nombreArchivoOrigen);
                enviarTrama(trama);
                enviadosTxt.setText("Bytes enviados: ");
                enviadosTxt.setEnabled(false);
                sizeOrigen = 0;
                partesOrigen = 0;
                partesEnviadas = 0;
                nombreArchivoOrigen = "";
                try{
                    bfOrigen.close();
                }catch(IOException e){
                    //
                }
                seleccionarBtn.setEnabled(true);
                macOrigenTxt.setEnabled(true);
                macDestinoTxt.setEnabled(true);
                archivoTxt.setEnabled(true);
                seleccionarArchivo.setEnabled(true);
                enviarBtn.setText("Enviar");
                archivoTxt.setText("");
            }else{
                if(recibiendo){
                    recibiendo = false;
                    byte[] trama = new byte[1024];
                    fillEthType(trama);
                    fillMacs(trama, macActual, macOrigen);
                    trama[14] = 0x07; //receiverCancel
                    fillFilename(trama, nombreArchivoDestino);
                    enviarTrama(trama);
                    try{
                        bfDestino.close();
                    }catch(IOException e){
                        //
                    }
                    recibidosTxt.setText("Bytes recibidos: ");
                    recibidosTxt.setEnabled(false);
                    recibiendo = false;
                    sizeDestino = 0;
                    partesDestino = 0;
                    partesRecibidas = 0;
                    tramasEnviadas = 0;
                    macOrigen = new byte[6];
                    nombreArchivoDestino = "";
                    seleccionarBtn.setEnabled(true);
                    macOrigenTxt.setEnabled(true);
                    macDestinoTxt.setEnabled(true);
                    archivoTxt.setEnabled(true);
                    seleccionarArchivo.setEnabled(true);
                }else{
                    if(nombreArchivoOrigen.equals("")) return;
                    esperando = true;
                    seleccionarBtn.setEnabled(false);
                    macOrigenTxt.setEnabled(false);
                    macDestinoTxt.setEnabled(false);
                    archivoTxt.setEnabled(false);
                    seleccionarArchivo.setEnabled(false);
                    enviarBtn.setText("Cancelar espera");
                    macDestino = stringToMac(macDestinoTxt.getText());
                    byte [] trama = new byte[1024];
                    fillMacs(trama, macActual, macDestino);
                    fillEthType(trama);
                    trama[14] = 0x00; //ask
                    fillFilename(trama, nombreArchivoOrigen);
                    fillSize(trama, sizeOrigen);
                    enviarTrama(trama);
                }
            }
        }
    }//GEN-LAST:event_enviarBtnMouseClicked

    private void seleccionarCarpetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seleccionarCarpetaMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            carpetaDestinoTxt.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_seleccionarCarpetaMouseClicked

    private void seleccionarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seleccionarBtnActionPerformed

    private void enviarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enviarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("com.sun.java.swing.plaf.gtk.GTKLookAndFeel".equals(info.getClassName())) {   
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
               break;
             } 
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ventanaPrincipal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField archivoTxt;
    private javax.swing.JTextField carpetaDestinoTxt;
    private javax.swing.JLabel enviadosTxt;
    private javax.swing.JButton enviarBtn;
    private javax.swing.JComboBox<String> interfacesLista;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField macDestinoTxt;
    private javax.swing.JTextField macOrigenTxt;
    private javax.swing.JLabel recibidosTxt;
    private javax.swing.JButton seleccionarArchivo;
    private javax.swing.JButton seleccionarBtn;
    private javax.swing.JButton seleccionarCarpeta;
    // End of variables declaration//GEN-END:variables
}
